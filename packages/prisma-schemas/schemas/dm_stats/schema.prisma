generator client {
  provider      = "prisma-client-js"
  output        = "../../client_dm_stats"
  binaryTargets = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x", "linux-arm64-openssl-1.1.x", "linux-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL_DM_STATS")
}

model authorStory {
  id         Int    @id @default(autoincrement()) @map("ID")
  personcode String @db.VarChar(79)
  storycode  String @db.VarChar(19)

  @@unique([personcode, storycode], map: "unique_index")
  @@index([storycode], map: "index_storycode")
  @@map("auteurs_histoires")
}

model authorUser {
  personcode String @map("NomAuteurAbrege") @db.VarChar(79)
  userId     Int    @map("ID_user")
  notation   Int    @default(-1) @map("Notation")

  @@unique([userId, personcode], map: "auteurs_pseudos_uindex")
  @@index([userId], map: "auteurs_pseudos_ID_user_index")
  @@map("auteurs_pseudos")
}

model issueSimple {
  id        Int     @id @default(autoincrement()) @map("ID")
  userId    Int     @map("ID_Utilisateur")
  issuecode String? @default(dbgenerated("(concat(convert(`Pays` using utf8mb3),'/',convert(`Magazine` using utf8mb3),' ',`Numero`))")) @map("issuecode") @db.VarChar(25)

  @@index([userId], map: "Utilisateur")
  @@index([issuecode], map: "issuecode")
  @@index([issuecode, userId], map: "issuecode_user")
  @@map("numeros_simple")
}

model storyIssue {
  ID              Int     @id @default(autoincrement())
  storycode       String  @db.VarChar(19)
  publicationcode String? @db.VarChar(12)
  issuenumber     String? @db.VarChar(12)
  issuecode       String  @db.VarChar(25)
  oldestdate      String? @db.VarChar(10)

  @@unique([issuecode, storycode], map: "unique_index")
  @@index([issuecode], map: "index_issue")
  @@index([oldestdate], map: "index_oldestdate")
  @@index([storycode], map: "index_story")
  @@map("histoires_publications")
}

model missingStoryForUser {
  id         Int    @id @default(autoincrement()) @map("ID")
  userId     Int    @map("ID_User")
  personcode String @db.VarChar(79)
  storycode  String @db.VarChar(19)

  @@unique([userId, personcode, storycode], map: "missing_issue_for_user")
  @@map("utilisateurs_histoires_manquantes")
}

model missingIssueForUser {
  ID              Int     @id @default(autoincrement())
  userId          Int     @map("ID_User")
  personcode      String  @db.VarChar(79)
  storycode       String  @db.VarChar(19)
  /// @deprecated
  publicationcode String? @db.VarChar(12)
  /// @deprecated
  issuenumber     String? @db.VarChar(12)
  issuecode       String  @db.VarChar(25)
  oldestdate      String? @db.VarChar(10)
  notation        Int     @map("Notation") @db.UnsignedTinyInt

  @@unique([userId, personcode, storycode, publicationcode, issuenumber], map: "unique_index")
  @@unique([userId, personcode, storycode, issuecode], map: "unique_index_issuecode")
  @@index([userId, publicationcode, issuenumber], map: "missing_user_issue")
  @@index([userId, publicationcode, issuenumber, oldestdate], map: "suggested")
  @@index([userId, personcode, storycode], map: "user_stories")
  @@index([userId, issuecode], map: "missing_user_issue_issuecode")
  @@index([userId, issuecode, oldestdate], map: "suggested_issuecode")
  @@map("utilisateurs_publications_manquantes")
}

model suggestedIssueForUser {
  ID              Int     @id @default(autoincrement())
  userId          Int     @map("ID_User")
  /// @deprecated
  publicationcode String? @db.VarChar(12)
  /// @deprecated
  issuenumber     String? @db.VarChar(12)
  issuecode       String  @db.VarChar(25)
  oldestdate      String? @db.VarChar(10)
  score           Int     @map("Score")

  @@unique([userId, publicationcode, issuenumber], map: "suggested_issue_for_user")
  @@unique([userId, issuecode], map: "suggested_issue_for_user_issuecode")
  @@index([userId], map: "suggested_issue_user")
  @@map("utilisateurs_publications_suggerees")
}
